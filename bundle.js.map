{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/game/blocks/block.js","webpack:///./src/game/blocks/i_block.js","webpack:///./src/game/blocks/j_block.js","webpack:///./src/game/blocks/l_block.js","webpack:///./src/game/blocks/o_block.js","webpack:///./src/game/blocks/s_block.js","webpack:///./src/game/blocks/t_block.js","webpack:///./src/game/blocks/z_block.js","webpack:///./src/game/board.js","webpack:///./src/game/game.js","webpack:///./src/index.js","webpack:///./src/util/util.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;AC1CrB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACZtB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACZtB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACZtB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;AChBtB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACZtB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACZtB;AAAA;AAA4B;;AAE5B,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACZtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AAE1C;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D,YAAY,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM,QAAQ,uDAAM;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,uDAAM;AACjC,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,mBAAmB,sBAAsB;AACzC;AACA;AACA,WAAW,0DAAc;AACzB;AACA;AACA,KAAK;AACL;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA,0BAA0B,+BAA+B;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,sDAAsD;AAC5E,wBAAwB,+BAA+B;AACvD;AACA;AACA;;AAEA,sBAAsB,sDAAsD;AAC5E,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;AChPrB;AAAA;AAA4B;;AAE5B;AACA,0BAA0B,8CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,WAAW;AAC1C;;AAEA;AACA;AACA,gCAAgC,WAAW;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;AC/GpB;AAAA;AAA+B;;AAE/B;AACA,yBAAyB,kDAAI;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,+BAA+B;AACrD;AACA,iCAAiC,KAAK;;AAEtC,wBAAwB,qCAAqC;AAC7D;AACA,mCAAmC,KAAK,GAAG,KAAK;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,sBAAsB,oBAAoB;AAC1C,wBAAwB,0BAA0B;AAClD,2DAA2D,KAAK,GAAG,KAAK;AACxE;AACA,iCAAiC,KAAK,GAAG,KAAK,GAAG,iBAAiB;AAClE,SAAS;AACT,iCAAiC,KAAK,GAAG,KAAK;AAC9C;AACA;AACA;AACA;AACA;;AAEe,kEAAG,EAAC;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,CAAC;;;;;;;;;;;;;AC7ED;AAAA;AACA,QAAQ,OAAO;AACf;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA,iBAAiB,yDAAyD;AAC1E,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;;AAEe,6EAAc,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./public/stylesheets\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class Block {\n  constructor(type = 'null', start = true) {\n    this.type = type;\n    this.symbol = 'X';\n    this.startPos = [[0, 0]];\n    this.currentPos = this.startPos;\n    this.pos = [[0, 0]];\n    this.start = start;\n    this.pivot = this.currentPos[0];\n    this.rotate = this.rotate.bind(this);\n  }\n\n  findBottomRow(pos) {\n    const xValues = [];\n    pos.forEach(coords => xValues.push(coords[0]));\n    const maxX = Math.max(...xValues);\n    const maxIndices = [];\n    xValues.forEach((x, idx) => {\n      if (x === maxX) maxIndices.push(idx);\n    });\n    const bottomRow = pos.filter((pos, idx) => maxIndices.includes(idx));\n    return bottomRow;\n  }\n\n  shift(newCoords) {\n    this.start = false;\n    this.currentPos = newCoords;\n    return this.currentPos;\n  }\n\n  rotate() {\n    this.pivot = this.currentPos[0];\n    this.currentPos = this.currentPos.map((coord) => {\n      const [x, y] = coord;\n      const newX = y + this.pivot[0] - this.pivot[1];\n      const newY = this.pivot[0] + this.pivot[1] - x;\n      return [newX, newY];\n    });\n    return this.currentPos;\n  }\n}\n\nexport default Block;\n","import Block from './block';\n\nclass IBlock extends Block {\n  constructor(type = 'threes') {\n    super(type);\n    this.symbol = 'I';\n    this.startPos = [[0, 4], [0, 3], [0, 5], [0, 6]];\n    this.currentPos = this.startPos;\n    this.pos = [[0, 0], [0, 1], [0, 2], [0, 3]];\n  }\n}\n\nexport default IBlock;\n","import Block from './block';\n\nclass JBlock extends Block {\n  constructor(type = 'fours') {\n    super(type);\n    this.symbol = 'J';\n    this.startPos = [[1, 5], [0, 4], [1, 4], [1, 6]];\n    this.currentPos = this.startPos;\n    this.pos = [[0, 0], [1, 0], [1, 1], [1, 2]];\n  }\n}\n\nexport default JBlock;\n","import Block from './block';\n\nclass LBlock extends Block {\n  constructor(type = 'fours') {\n    super(type);\n    this.symbol = 'L';\n    this.startPos = [[1, 5], [0, 6], [1, 4], [1, 6]];\n    this.currentPos = this.startPos;\n    this.pos = [[1, 0], [1, 1], [1, 2], [0, 2]];\n  }\n}\n\nexport default LBlock;\n","import Block from './block';\n\nclass OBlock extends Block {\n  constructor(type = 'fours') {\n    super(type);\n    this.symbol = 'O';\n    this.startPos = [[0, 4], [0, 5], [1, 4], [1, 5]];\n    this.currentPos = this.startPos;\n    this.pos = [[0, 0], [0, 1], [1, 0], [1, 1]];\n  }\n\n  rotate() {\n\n  }\n}\n\nexport default OBlock;\n","import Block from './block';\n\nclass SBlock extends Block {\n  constructor(type = 'fours') {\n    super(type);\n    this.symbol = 'S';\n    this.startPos = [[1, 5], [0, 5], [0, 6], [1, 4]];\n    this.currentPos = this.startPos;\n    this.pos = [[1, 0], [1, 1], [0, 1], [0, 2]];\n  }\n}\n\nexport default SBlock;\n","import Block from './block';\n\nclass TBlock extends Block {\n  constructor(type = 'fours') {\n    super(type);\n    this.symbol = 'T';\n    this.startPos = [[1, 5], [0, 5], [1, 4], [1, 6]];\n    this.currentPos = this.startPos;\n    this.pos = [[1, 1], [0, 1], [1, 0], [1, 2]];\n  }\n}\n\nexport default TBlock;\n","import Block from './block';\n\nclass ZBlock extends Block {\n  constructor(type = 'fours') {\n    super(type);\n    this.symbol = 'Z';\n    this.startPos = [[1, 5], [0, 4], [0, 5], [1, 6]];\n    this.currentPos = this.startPos;\n    this.pos = [[0, 0], [0, 1], [1, 1], [1, 2]];\n  }\n}\n\nexport default ZBlock;\n","import OBlock from './blocks/o_block';\nimport TBlock from './blocks/t_block';\nimport LBlock from './blocks/l_block';\nimport JBlock from './blocks/j_block';\nimport ZBlock from './blocks/z_block';\nimport SBlock from './blocks/s_block';\nimport IBlock from './blocks/i_block';\nimport searchForArray from '../util/util';\n\nconst row = [\n  'X', 'X', 'X', 'X', 'X',\n  'X', 'X', 'X', 'X', 'X',\n];\n\nconst defaultGrid = [];\n\n// Make default grid 21 rows in height\nfor (let i = 0; i < 21; i++) {\n  defaultGrid.push(Array.from(row));\n}\n\nclass Board {\n  constructor(grid = defaultGrid) {\n    this.grid = grid;\n    this.pieces = [];\n\n    this.renderBlockStart = this.renderBlockStart.bind(this);\n    this.blockRenderable = this.blockRenderable.bind(this);\n    this.shiftBlock = this.shiftBlock.bind(this);\n    this.renderBlock = this.renderBlock.bind(this);\n    this.clearRows = this.clearRows.bind(this);\n    this.shiftClearedRow = this.shiftClearedRow.bind(this);\n    this.dropBlock = this.dropBlock.bind(this);\n    this.setPresetBlock = this.setPresetBlock.bind(this);\n    this.blastEffect = this.blastEffect.bind(this);\n    this.next = this.next.bind(this);\n    this.currentBlock = this.next();\n    this.gameOver = false;\n  }\n\n  next() {\n    if (this.pieces.length === 0) {\n      this.pieces = [\n        new OBlock(), new OBlock(), new OBlock(), new OBlock(),\n        new TBlock(), new TBlock(), new TBlock(), new TBlock(),\n        new LBlock(), new LBlock(), new LBlock(), new LBlock(),\n        new JBlock(), new JBlock(), new JBlock(), new JBlock(),\n        new ZBlock(), new ZBlock(), new ZBlock(), new ZBlock(),\n        new SBlock(), new SBlock(), new SBlock(), new SBlock(),\n        new IBlock(), new IBlock(), new IBlock(), new IBlock(),\n      ];\n    }\n\n    return this.pieces.splice(\n      Math.floor(Math.random() * this.pieces.length - 1),\n      1,\n    )[0];\n  }\n\n  blockRenderable(block) {\n    if (block.start) {\n      if (block instanceof IBlock) {\n        for (let i = 0; i < block.startPos.length; i++) {\n          const [x, y] = block.startPos[i];\n          if (this.grid[x + 1][y] !== 'X') {\n            this.gameOver = true;\n            return false;\n          }\n        }\n      } else {\n        const startBottomRow = block.findBottomRow(block.startPos);\n        for (let i = 0; i < startBottomRow.length; i++) {\n          const [x, y] = startBottomRow[i];\n          if (this.grid[x][y] !== 'X') {\n            this.gameOver = true;\n            return false;\n          }\n        }\n      }\n    } return true;\n  }\n\n  nextLevel(block, direction) {\n    const newPos = block.currentPos.map((coord) => {\n      const [x, y] = coord;\n      switch (direction) {\n        case 'down':\n          return [x + 1, y];\n          break;\n        case 'right':\n          return [x, y + 1];\n        case 'left':\n          return [x, y - 1];\n        default:\n          break;\n      }\n    });\n    return newPos;\n  }\n\n  shiftBlock(block, direction) {\n    if (this.shiftable(block, direction)) {\n      this.renderBlock('X', block.currentPos);\n      block.shift(this.nextLevel(block, direction));\n      this.renderBlock(block.symbol, block.currentPos);\n    }\n  }\n\n  rotateBlock(block) {\n    if (this.rotatable(block)) {\n      this.renderBlock('X', block.currentPos);\n      block.rotate();\n      this.renderBlock(block.symbol, block.currentPos);\n    }\n  }\n\n  shiftable(block, direction) {\n    const newCoords = this.nextLevel(block, direction);\n    for (let i = 0; i < newCoords.length; i++) {\n      const [x, y] = newCoords[i];\n      if (x === 21 || y === 10 || (this.grid[x][y] !== 'X'\n          && searchForArray(block.currentPos, newCoords[i]) === -1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  rotatable(block) {\n    block.pivot = block.currentPos[0];\n    const newCoords = block.currentPos.map((coord) => {\n      const [x, y] = coord;\n      const newX = y + block.pivot[0] - block.pivot[1];\n      const newY = block.pivot[0] + block.pivot[1] - x;\n      return [newX, newY];\n    });\n\n    for (let i = 0; i < newCoords.length; i++) {\n      const [x, y] = newCoords[i];\n      if (this.grid[x][y] !== 'X'\n        && searchForArray(block.currentPos, newCoords[i]) === -1) {\n        return false;\n      }\n    } return true;\n  }\n\n  renderBlock(blockSym, coords) {\n    for (let i = 0; i < coords.length; i++) {\n      const [x, y] = coords[i];\n      this.grid[x][y] = blockSym;\n    }\n  }\n\n  renderBlockStart(block) {\n    for (let i = 0; i < block.startPos.length; i++) {\n      const [x, y] = block.startPos[i];\n      this.grid[x][y] = block.symbol;\n    }\n  }\n\n  blastEffect() {\n    let blasts = document.getElementsByClassName('blast');\n    for (let i = 0; i < blasts.length; i++) {\n      const blast = blasts[i];\n      blast.className = 'blast on';\n    }\n\n    blasts = document.getElementsByClassName('blast');\n\n    setTimeout(() => {\n      for (let i = 0; i < blasts.length; i++) {\n        const blast = blasts[i];\n        blast.className = 'blast off';\n      }\n    }, 500);\n  }\n\n  clearRows() {\n    this.rowClearCount = 0;\n    this.lowestRowCleared = null;\n    for (let idx1 = 0; idx1 < this.grid.length; idx1++) {\n      if (this.grid[idx1].every(coord => coord !== 'X')) {\n        this.rowClearCount += 1;\n        this.lowestRowCleared = idx1;\n        for (let idx2 = 0; idx2 < this.grid[idx1].length; idx2++) {\n          this.grid[idx1][idx2] = 'X';\n        }\n      }\n    }\n    if (this.rowClearCount > 0) this.blastEffect();\n  }\n\n  shiftClearedRow() {\n    const tempGrid = this.grid.map(a => Object.assign([], a));\n    for (let idx1 = 0; idx1 <= (this.lowestRowCleared - this.rowClearCount); idx1++) {\n      for (let idx2 = 0; idx2 < this.grid[idx1].length; idx2++) {\n        this.grid[idx1][idx2] = 'X';\n      }\n    }\n\n    for (let idx3 = 0; idx3 <= (this.lowestRowCleared - this.rowClearCount); idx3++) {\n      for (let idx4 = 0; idx4 < this.grid[idx3].length; idx4++) {\n        this.grid[idx3 + 1][idx4] = tempGrid[idx3][idx4];\n      }\n    }\n    this.rowClearCount -= 1;\n  }\n\n  dropBlock(block) {\n    const newCoords = this.setPresetBlock(block);\n    this.rowsDropped = newCoords[0][0] - block.currentPos[0][0];\n    this.renderBlock('X', block.currentPos);\n    block.shift(newCoords);\n    this.renderBlock(block.symbol, newCoords);\n  }\n\n  setPresetBlock(block) {\n    const presetBlock = {\n      currentPos: block.currentPos.map(coord => Object.assign([], coord)),\n    };\n\n    const tempGrid = this.grid.map(a => Object.assign([], a));\n\n    let shiftable = true;\n    while (shiftable) {\n      const newCoords = this.nextLevel(presetBlock, 'down');\n      for (let i = 0; i < newCoords.length; i++) {\n        const [x, y] = newCoords[i];\n        if (x === 21 || y === 10 || (tempGrid[x][y] !== 'X'\n          && searchForArray(presetBlock.currentPos, newCoords[i]) === -1)) {\n          shiftable = false;\n          break;\n        }\n      }\n      if (shiftable) presetBlock.currentPos = newCoords;\n    }\n    return presetBlock.currentPos;\n  }\n}\n\nexport default Board;\n","import Board from './board';\n\nclass Game {\n  constructor(board = new Board()) {\n    this.board = board;\n    this.over = this.over.bind(this);\n    this.playNextBlock = this.playNextBlock.bind(this);\n    this.level = 1;\n    this.time = (this.level === 1 ? 1000 : (1000 / (2 * this.level)));\n    this.score = 0;\n    this.updateLevel = this.updateLevel.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n    this.eventListenMovement = this.eventListenMovement.bind(this);\n\n    this.update = setInterval(() => {\n      this.updateScore();\n      this.updateLevel();\n    }, 25);\n\n    document.addEventListener('keydown', this.eventListenMovement);\n  }\n\n  eventListenMovement(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        this.board.shiftBlock(this.board.currentBlock, 'down');\n        this.score += 40 * this.level;\n        break;\n      case 'ArrowUp':\n        this.board.rotateBlock(this.board.currentBlock);\n        break;\n      case 'ArrowLeft':\n        this.board.shiftBlock(this.board.currentBlock, 'left');\n        break;\n      case 'ArrowRight':\n        this.board.shiftBlock(this.board.currentBlock, 'right');\n        break;\n      case ' ':\n        this.board.dropBlock(this.board.currentBlock);\n        this.score += 40 * this.level * this.board.rowsDropped;\n        break;\n      default:\n        break;\n    }\n  }\n\n  over() {\n    return this.board.gameOver;\n  }\n\n  scoringByLinesCleared() {\n    return {\n      1: 40,\n      2: 100,\n      3: 300,\n      4: 1200,\n    };\n  }\n\n  updateLevel() {\n    const level = document.getElementsByClassName('level')[0];\n    level.innerHTML = `Level ${this.level}`;\n  }\n\n  updateScore() {\n    const score = document.getElementsByClassName('score')[0];\n    score.innerHTML = `Score: ${this.score}`;\n  }\n\n  playNextBlock() {\n    if (this.score >= ((10000 * 2.5) * (2 ** this.level))) {\n      this.level += 1;\n      this.updateLevel();\n    }\n    const { currentBlock } = this.board;\n    if (currentBlock.start && this.board.blockRenderable(currentBlock)) {\n      this.board.renderBlockStart(currentBlock);\n    } else {\n      document.removeEventListener('keydown', this.eventListenMovement);\n      clearInterval(this.update);\n      return;\n    }\n\n    const descendBlock = setInterval(() => {\n      this.board.shiftBlock(currentBlock, 'down');\n      if (!this.board.shiftable(currentBlock, 'down')) {\n        this.board.clearRows();\n        if (this.board.rowClearCount > 0) {\n          this.score += this.scoringByLinesCleared()[this.board.rowClearCount] * (this.level + 1);\n          this.updateScore();\n          const shiftClearedRows = setInterval(() => {\n            this.board.shiftClearedRow();\n            if (this.board.rowClearCount === 0) {\n              clearInterval(shiftClearedRows);\n              this.board.currentBlock = this.board.next();\n              clearInterval(descendBlock);\n              this.playNextBlock();\n            }\n          }, 50);\n        } else {\n          this.board.currentBlock = this.board.next();\n          clearInterval(descendBlock);\n          if (!this.over()) {\n            this.playNextBlock();\n          }\n        }\n      }\n    }, this.time);\n  }\n}\n\nexport default Game;\n","import Game from './game/game';\n\nclass App {\n  constructor(game = new Game()) {\n    this.game = game;\n    this.populateGrid = this.populateGrid.bind(this);\n    this.board = this.game.board;\n    this.renderBlocks = this.renderBlocks.bind(this);\n  }\n\n  populateGrid() {\n    const gameContainer = document.getElementsByClassName('block-game')[0];\n    for (let idx1 = 1; idx1 < this.board.grid.length; idx1++) {\n      const rowNode = document.createElement('div');\n      rowNode.className = `row ${idx1}`;\n\n      for (let idx2 = 0; idx2 < this.board.grid[idx1].length; idx2++) {\n        const colNode = document.createElement('div');\n        colNode.className = `pos-${idx1}-${idx2}`;\n        rowNode.appendChild(colNode);\n      }\n      gameContainer.appendChild(rowNode);\n    }\n  }\n\n  renderBlocks() {\n    const { grid } = this.board;\n    for (let idx1 = 1; idx1 < grid.length; idx1++) {\n      for (let idx2 = 0; idx2 < grid[idx1].length; idx2++) {\n        const pos = document.getElementsByClassName(`pos-${idx1}-${idx2}`)[0];\n        if (grid[idx1][idx2] !== 'X') {\n          pos.className = `pos-${idx1}-${idx2} ${grid[idx1][idx2]}`;\n        } else {\n          pos.className = `pos-${idx1}-${idx2}`;\n        }\n      }\n    }\n  }\n}\n\nexport default App;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.getElementsByClassName('start-button')[0];\n  const retryButton = document.getElementsByClassName('start-button')[1];\n\n  const startGame = () => {\n    const startModal = document.getElementsByClassName('modal')[0];\n    if (startModal) startModal.className = 'modal-off';\n\n    const app = new App();\n\n    if (document.getElementsByClassName('row').length === 0) {\n      app.populateGrid();\n    }\n\n    const render = setInterval(() => {\n      app.renderBlocks();\n    }, 25);\n\n    app.game.playNextBlock();\n\n    const checkGameOver = setInterval(() => {\n      if (app.game.over()) {\n        clearInterval(render);\n        clearInterval(checkGameOver);\n        const gameOverModal = document.getElementById('game-over');\n        gameOverModal.className = 'modal';\n        retryButton.onclick = () => {\n          document.removeEventListener('click', startGame);\n          document.location.href = '';\n        };\n      }\n    }, 25);\n  };\n\n  startButton.addEventListener('click', startGame);\n});\n","const searchForArray = (array, targetArray) => {\n  let i; let j; let\n    current;\n  for (i = 0; i < array.length; ++i) {\n    if (targetArray.length === array[i].length) {\n      current = array[i];\n      for (j = 0; j < targetArray.length && targetArray[j] === current[j]; ++j);\n      if (j === targetArray.length) { return i; }\n    }\n  }\n  return -1;\n};\n\nexport default searchForArray;\n"],"sourceRoot":""}